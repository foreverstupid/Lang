# Sample program in Lang. ASCII interactive paint programm.
{
    #====================================================================
    # Constants
    #====================================================================
    # program exit character
    ESC = "\x1b";

    # ESC-sequences for terminal cursor position control
    LEFT = "\x1b[1D";
    RIGHT = "\x1b[1C";
    UP = "\x1b[1A";
    DOWN = "\x1b[1B";

    # ESC-sequences for text color definition
    BLACK = "\x1b[30m";
    RED = "\x1b[31m";
    GREEN = "\x1b[32m";
    YELLOW = "\x1b[33m";
    BLUE = "\x1b[34m";
    PURPLE = "\x1b[35m";
    CYAN = "\x1b[36m";
    GREY = "\x1b[37m";
    RESET = "\x1b[0m";
    COLORS {
        $BLACK,
        $RED,
        $GREEN,
        $YELLOW,
        $BLUE,
        $PURPLE,
        $CYAN,
        $GREY
    };

    # key bindings
    allowedKeys = "adws trec12345678";
    left = ($allowedKeys)[0];
    right = ($allowedKeys)[1];
    up = ($allowedKeys)[2];
    down = ($allowedKeys)[3];
    mark = ($allowedKeys)[4];
    space = ($allowedKeys)[5];
    remove = ($allowedKeys)[6];
    delete = ($allowedKeys)[7];
    swap = ($allowedKeys)[8];

    # constructs reference info about colors
    getColorsinfo = [] =>
    {
        loc i = -1;
        loc info = "";

        as ((i = $i + 1) < 8)
        {
            info = $info + $COLORS[$i] + ($i + 1)
        };

        $info + $RESET
    };

    #====================================================================
    # Main algorithm
    #====================================================================
    prompt = "\n{$PURPLE}A{$GREEN}S{$BLUE}C{$CYAN}I{$YELLOW}I {$RESET}DRAWER\n" +
             "{$RED}wasd{$RESET} - move the brush, " +
             "{$RED}SPACE{$RESET} - put/take brush, " +
             "{getColorsinfo()} - change color,\n" +
             "{$RED}e{$RESET} - remove back, " +
             "{$RED}r{$RESET} - remove current, " +
             "{$RED}t{$RESET} - remove forward,\n" +
             "{$RED}c{$RESET} - change brush symbol, " +
             "{$RED}ESC{$RESET} - exit\n";

    # brush settings
    isPut = 0;
    color = $GREEN;
    markSymbol = "#";
    brush = [] => $color + $markSymbol;

    # action definitions
    actions {
        [$left] = [] => if ($isPut) sys.write($LEFT + brush() + $LEFT) or sys.write($LEFT),
        [$right] = [] => if ($isPut) sys.write($RIGHT + brush() + $LEFT) or sys.write($RIGHT),
        [$up] = [] => if ($isPut) sys.write($UP + brush() + $LEFT) or sys.write($UP),
        [$down] = [] => if ($isPut) sys.write($DOWN + brush() + $LEFT) or sys.write($DOWN),
        [$mark] = [] => if (isPut = !$isPut) sys.write(brush() + $LEFT),
        [$space] = [] => sys.write(" "),
        [$remove] = [] => sys.write(" " + $LEFT),
        [$delete] = [] => sys.write($LEFT + " " + $LEFT),
        [$swap] = [] => markSymbol = sys.readKey(0)
    };

    height = 15;
    sys.write($prompt);
    sys.write("\n" * $height);
    sys.write($UP * ($height - 1));

    as ((ch = sys.readKey(0)) !~ $ESC)
        if ($ch in $allowedKeys)
        {
            if ($ch ? 0)
            {
                color = $COLORS[($ch : 0) - 1]
            }
            or
            {
                (actions[$ch])()
            }
        };

    sys.write("\n" * $height);
    sys.write($RESET)  # $RESET will be the exit value of the program
}