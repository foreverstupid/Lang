# A sample of the program in Lang. The simple one-operation calculator.
{
    # array of allowed operations as a map between strings and
    # two-argument lambdas
    operations["+"] = [a, b] => $a + $b;
    operations["-"] = [a, b] => $a - $b;
    operations["*"] = [a, b] => $a * $b;
    operations["/"] = [a, b] => $a / $b;

    # checks that the given operation is allowed
    isAllowedOperation = [ref op] =>   # we can declare parameter with 'ref' to avoid $ usage everywhere
        op ~ "+" | op ~ "-" | op ~ "*" | op ~ "/";

    # parsing function that takes an input line and returns
    # the following object:
    #   {
    #       "left"    - the first operand as a number
    #       "right"   - the second operand as a number
    #       "op"      - the required operation as a string
    #       "error"   - string that describes an error of parsing or is empty
    #   }
    parse = [str] =>
    {
        loc input = $str + " ";
        loc len = _length($input);
        loc tokenCount = 0;
        loc token = "";

        # help inner function that handles a new token adding
        # (note, that it can see any variable of the parent function)
        loc handleToken = [] =>
            if ($token)
            {
                tokens[$tokenCount] = $token;
                tokenCount = $tokenCount + 1;
                token = ""
            };

        loc i = -1;
        loc ch;
        as ((i = $i + 1) < $len)
        {
            ch = ($input)[$i];
            if ($ch ~ " ")
            {
                handleToken()
            }
            or
            {
                isOperation = isAllowedOperation($ch);
                if ($isOperation)
                {
                    handleToken()
                };

                token = $token + $ch;

                if ($isOperation)
                {
                    handleToken()
                }
            }
        };

        loc ref result = _alloc();  # allocating dynamic variable that will contain parsing info
                                    # (we use reference variable holder to prevent additional dereferencing)

        if (!($tokenCount ~ 3))
        {
            result.error = "Invalid expression. It should contain two operands and operation"
        }
        or if (!(isAllowedOperation($tokens[1])))
        {
            result.error = "Invalid operation \"{$tokens[1]}\". Allowed operations are +, -, *, and /"
        }
        or if (!($tokens[0] ? 0.0))
        {
            result.error = "The first operand \"{$tokens[0]}\" is not a number"
        }
        or if (!($tokens[2] ? 0.0))
        {
            result.error = "The second operand \"{$tokens[2]}\" is not a number"
        }
        or
        {
            result.left = $tokens[0] : 0.0;
            result.right = $tokens[2] : 0.0;
            result.op = $tokens[1];
            result.error = ""
        };

        # We can return a whole dictionary, then we can assign this returning value
        # to some variable "a" and use it like the following:
        #   $(a).left
        # or
        #   tmp = $($a).right
        #
        # Note, that we would able to return even static dictionary. In that
        # case all invocations of this function would use and return the same dictionary.
        # Using dynamic variable we prevent it, because now any "parse" invocation
        # operates and returns its own dynamic variable. Anyway if you are sure that you will
        # never use results of several invocations simultaneously, you can operate static
        # variables only.
        result
    };



    #===============================================================
    #-------------------------- MAIN ALGORITHM ---------------------
    #===============================================================
    prompt = "\nInput binary expression. Allowed operations are +, -, *, /.\n" +
             "Hit Enter to exit. \n" +
             "=> ";

    _write($prompt);
    as (input = _read())
    {
        ref args = parse($input);   # using reference variable to avoid additional dereferencing
        if ($args.error)
        {
            _write("  " + $args.error + "\n")
        }
        or
        {
            operation = $operations[$args.op];
            _write("   = " + (operation($args.left, $args.right)) + "\n")
        };

        _free(args);        # deallocating dynamic variable (that is contained in "args")
        _write($prompt)
    };

    0    # this value will be returned as an exit value of the program
}